<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\dbg\dpp.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\dbg\dpp.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sat Jul 03 16:56:01 2021
<BR><P>
<H3>Maximum Stack Usage =        224 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Table_serving &rArr; QF_publish_ &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; QF_tickXFromISR_ &rArr; QActive_postFromISR_ &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3b]">ADC1Seq0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[3c]">ADC1Seq1_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[3d]">ADC1Seq2_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[3e]">ADC1Seq3_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[1a]">ADCSeq0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[1b]">ADCSeq1_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[1c]">ADCSeq2_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[1d]">ADCSeq3_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[6]">BusFault_Handler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[33]">CAN0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[34]">CAN1_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[35]">CAN2_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[25]">Comp0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[26]">Comp1_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[27]">Comp2_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[5b]">FPU_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[29]">FlashCtrl_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[c]">GPIOPortA_IRQHandler</a> from bsp.o(i.GPIOPortA_IRQHandler) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[d]">GPIOPortB_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[e]">GPIOPortC_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[f]">GPIOPortD_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[10]">GPIOPortE_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[2a]">GPIOPortF_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[2b]">GPIOPortG_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[2c]">GPIOPortH_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[3f]">GPIOPortJ_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[40]">GPIOPortK_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[41]">GPIOPortL_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[5e]">GPIOPortM_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[5f]">GPIOPortN_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[61]">GPIOPortP0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[62]">GPIOPortP1_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[63]">GPIOPortP2_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[64]">GPIOPortP3_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[65]">GPIOPortP4_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[66]">GPIOPortP5_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[67]">GPIOPortP6_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[68]">GPIOPortP7_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[69]">GPIOPortQ0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[6a]">GPIOPortQ1_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[6b]">GPIOPortQ2_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[6c]">GPIOPortQ3_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[6d]">GPIOPortQ4_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[6e]">GPIOPortQ5_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[6f]">GPIOPortQ6_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[70]">GPIOPortQ7_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[71]">GPIOPortR_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[72]">GPIOPortS_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[7a]">Heartbeat_initial</a> from blinky.o(i.Heartbeat_initial) referenced from blinky.o(i.Heartbeat_ctor)
 <LI><a href="#[7b]">Heartbeat_off</a> from blinky.o(i.Heartbeat_off) referenced from blinky.o(i.Heartbeat_initial)
 <LI><a href="#[7b]">Heartbeat_off</a> from blinky.o(i.Heartbeat_off) referenced from blinky.o(i.Heartbeat_on)
 <LI><a href="#[7b]">Heartbeat_off</a> from blinky.o(i.Heartbeat_off) referenced from blinky.o(i.Heartbeat_start)
 <LI><a href="#[7c]">Heartbeat_on</a> from blinky.o(i.Heartbeat_on) referenced from blinky.o(i.Heartbeat_off)
 <LI><a href="#[7d]">Heartbeat_start</a> from blinky.o(i.Heartbeat_start) referenced from blinky.o(i.Heartbeat_off)
 <LI><a href="#[7d]">Heartbeat_start</a> from blinky.o(i.Heartbeat_start) referenced from blinky.o(i.Heartbeat_on)
 <LI><a href="#[7d]">Heartbeat_start</a> from blinky.o(i.Heartbeat_start) referenced from blinky.o(i.Heartbeat_stop)
 <LI><a href="#[7e]">Heartbeat_stop</a> from blinky.o(i.Heartbeat_stop) referenced from blinky.o(i.Heartbeat_start)
 <LI><a href="#[36]">Hibernate_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[14]">I2C0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[31]">I2C1_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[49]">I2C2_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[4a]">I2C3_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[5c]">I2C4_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[5d]">I2C5_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[5]">MemManage_Handler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[77]">PWM1Fault_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[73]">PWM1Gen0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[74]">PWM1Gen1_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[75]">PWM1Gen2_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[76]">PWM1Gen3_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[15]">PWMFault_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[16]">PWMGen0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[17]">PWMGen1_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[18]">PWMGen2_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[38]">PWMGen3_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[82]">Philo_eating</a> from philo.o(i.Philo_eating) referenced from philo.o(i.Philo_hungry)
 <LI><a href="#[83]">Philo_hungry</a> from philo.o(i.Philo_hungry) referenced from philo.o(i.Philo_thinking)
 <LI><a href="#[80]">Philo_initial</a> from philo.o(i.Philo_initial) referenced from philo.o(i.Philo_ctor)
 <LI><a href="#[81]">Philo_thinking</a> from philo.o(i.Philo_thinking) referenced from philo.o(i.Philo_eating)
 <LI><a href="#[81]">Philo_thinking</a> from philo.o(i.Philo_thinking) referenced from philo.o(i.Philo_initial)
 <LI><a href="#[93]">QActive_postLIFO_</a> from qf_actq.o(i.QActive_postLIFO_) referenced from qf_qact.o(.constdata)
 <LI><a href="#[92]">QActive_post_</a> from qf_actq.o(i.QActive_post_) referenced from qf_qact.o(.constdata)
 <LI><a href="#[8f]">QActive_start_</a> from qf_port.o(i.QActive_start_) referenced 2 times from qf_actq.o(.constdata)
 <LI><a href="#[19]">QEI0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[32]">QEI1_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[60]">QEI2_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[8c]">QHsm_dispatch_</a> from qep_hsm.o(i.QHsm_dispatch_) referenced 2 times from qep_hsm.o(.constdata)
 <LI><a href="#[8b]">QHsm_init_</a> from qep_hsm.o(i.QHsm_init_) referenced 2 times from qep_hsm.o(.constdata)
 <LI><a href="#[7f]">QHsm_top</a> from qep_hsm.o(i.QHsm_top) referenced from blinky.o(i.Heartbeat_start)
 <LI><a href="#[7f]">QHsm_top</a> from qep_hsm.o(i.QHsm_top) referenced from blinky.o(i.Heartbeat_stop)
 <LI><a href="#[7f]">QHsm_top</a> from qep_hsm.o(i.QHsm_top) referenced from philo.o(i.Philo_eating)
 <LI><a href="#[7f]">QHsm_top</a> from qep_hsm.o(i.QHsm_top) referenced from philo.o(i.Philo_hungry)
 <LI><a href="#[7f]">QHsm_top</a> from qep_hsm.o(i.QHsm_top) referenced from philo.o(i.Philo_thinking)
 <LI><a href="#[7f]">QHsm_top</a> from qep_hsm.o(i.QHsm_top) referenced from qep_hsm.o(i.QHsm_ctor)
 <LI><a href="#[7f]">QHsm_top</a> from qep_hsm.o(i.QHsm_top) referenced from qep_hsm.o(i.QHsm_init_)
 <LI><a href="#[7f]">QHsm_top</a> from qep_hsm.o(i.QHsm_top) referenced from table.o(i.Table_active)
 <LI><a href="#[8e]">QTicker_dispatch_</a> from qf_actq.o(i.QTicker_dispatch_) referenced from qf_actq.o(.constdata)
 <LI><a href="#[8d]">QTicker_init_</a> from qf_actq.o(i.QTicker_init_) referenced from qf_actq.o(.constdata)
 <LI><a href="#[91]">QTicker_postLIFO_</a> from qf_actq.o(i.QTicker_postLIFO_) referenced from qf_actq.o(.constdata)
 <LI><a href="#[90]">QTicker_post_</a> from qf_actq.o(i.QTicker_post_) referenced from qf_actq.o(.constdata)
 <LI><a href="#[94]">Reset_Handler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[13]">SSI0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[2e]">SSI1_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[42]">SSI2_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[43]">SSI3_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[28]">SysCtrl_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[78]">SystemInit</a> from system_tm4c123gh6pm.o(i.SystemInit) referenced from startup_tm4c123gh6pm.o(.text)
 <LI><a href="#[87]">Table_active</a> from table.o(i.Table_active) referenced from table.o(i.Table_paused)
 <LI><a href="#[87]">Table_active</a> from table.o(i.Table_active) referenced from table.o(i.Table_serving)
 <LI><a href="#[85]">Table_initial</a> from table.o(i.Table_initial) referenced from table.o(i.Table_ctor)
 <LI><a href="#[88]">Table_paused</a> from table.o(i.Table_paused) referenced from table.o(i.Table_serving)
 <LI><a href="#[86]">Table_serving</a> from table.o(i.Table_serving) referenced from table.o(i.Table_initial)
 <LI><a href="#[86]">Table_serving</a> from table.o(i.Table_serving) referenced from table.o(i.Table_paused)
 <LI><a href="#[1f]">Timer0A_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[20]">Timer0B_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[21]">Timer1A_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[22]">Timer1B_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[23]">Timer2A_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[24]">Timer2B_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[2f]">Timer3A_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[30]">Timer3B_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[4b]">Timer4A_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[4c]">Timer4B_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[4d]">Timer5A_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[4e]">Timer5B_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[11]">UART0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[12]">UART1_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[2d]">UART2_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[44]">UART3_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[45]">UART4_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[46]">UART5_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[47]">UART6_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[48]">UART7_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[37]">USB0_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[1e]">Watchdog_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[4f]">WideTimer0A_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[50]">WideTimer0B_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[51]">WideTimer1A_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[52]">WideTimer1B_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[53]">WideTimer2A_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[54]">WideTimer2B_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[55]">WideTimer3A_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[56]">WideTimer3B_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[57]">WideTimer4A_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[58]">WideTimer4B_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[59]">WideTimer5A_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[5a]">WideTimer5B_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[95]">__main</a> from __main.o(!!!main) referenced from startup_tm4c123gh6pm.o(.text)
 <LI><a href="#[8a]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[89]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[84]">task_function</a> from qf_port.o(i.task_function) referenced from qf_port.o(i.QActive_start_)
 <LI><a href="#[3a]">uDMAError_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
 <LI><a href="#[39]">uDMAST_IRQHandler</a> from startup_tm4c123gh6pm.o(.text) referenced from startup_tm4c123gh6pm.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[95]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[98]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[9a]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[102]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[103]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[9b]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[104]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[a1]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[9c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[105]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[106]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[107]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[108]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[109]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[10a]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[10b]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[10c]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[10d]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[10e]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[10f]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[110]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[111]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[112]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[113]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[114]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[115]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[116]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[117]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[118]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[a6]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[119]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[11a]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[11b]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[11c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[11d]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[11e]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[11f]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[120]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[99]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[121]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[9e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a0]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[122]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[a2]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; QF_run &rArr; vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[123]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[b0]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[a5]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[124]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[a7]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[100]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[ff]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[94]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>ADC1Seq0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC1Seq1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ADC1Seq2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>ADC1Seq3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADCSeq0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADCSeq1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADCSeq2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADCSeq3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>CAN2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Comp0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>Comp1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>Comp2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>FlashCtrl_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>GPIOPortB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GPIOPortC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>GPIOPortD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GPIOPortE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>GPIOPortF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>GPIOPortG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>GPIOPortH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>GPIOPortJ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>GPIOPortK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>GPIOPortL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>GPIOPortM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>GPIOPortN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>GPIOPortP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>GPIOPortP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>GPIOPortP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>GPIOPortP3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>GPIOPortP4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>GPIOPortP5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>GPIOPortP6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPIOPortP7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>GPIOPortQ0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>GPIOPortQ1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPIOPortQ2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPIOPortQ3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>GPIOPortQ4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPIOPortQ5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>GPIOPortQ6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>GPIOPortQ7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>GPIOPortR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>GPIOPortS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>Hibernate_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>I2C3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>I2C4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>I2C5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>PWM1Fault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>PWM1Gen0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>PWM1Gen1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>PWM1Gen2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>PWM1Gen3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PWMFault_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PWMGen0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PWMGen1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PWMGen2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>PWMGen3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>QEI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>QEI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>QEI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SSI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SSI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SSI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SSI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SysCtrl_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>Timer0A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>Timer0B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>Timer1A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>Timer1B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Timer2A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>Timer2B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>Timer3A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>Timer3B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>Timer4A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>Timer4B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>Timer5A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>Timer5B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>Watchdog_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>WideTimer0A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>WideTimer0B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>WideTimer1A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>WideTimer1B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>WideTimer2A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>WideTimer2B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>WideTimer3A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>WideTimer3B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>WideTimer4A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>WideTimer4B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>WideTimer5A_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>WideTimer5B_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>uDMAError_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>uDMAST_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[97]"></a>assert_failed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_tm4c123gh6pm.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1Seq0_IRQHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[125]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[ac]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[9f]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[a4]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[12c]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[12d]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[12e]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>BSP_BP_BuzzerIO_Init</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, bsp.o(i.BSP_BP_BuzzerIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_init
</UL>

<P><STRONG><a name="[c0]"></a>BSP_BP_Buzzer_Set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp.o(i.BSP_BP_Buzzer_Set))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_on
</UL>

<P><STRONG><a name="[c1]"></a>BSP_bstrPackLedBlueOff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp.o(i.BSP_bstrPackLedBlueOff))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_on
</UL>

<P><STRONG><a name="[bf]"></a>BSP_bstrPackLedBlueOn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp.o(i.BSP_bstrPackLedBlueOn))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_on
</UL>

<P><STRONG><a name="[e9]"></a>BSP_displayPaused</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp.o(i.BSP_displayPaused))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Table_paused
</UL>

<P><STRONG><a name="[e8]"></a>BSP_displayPhilStat</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp.o(i.BSP_displayPhilStat))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Table_serving
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Table_paused
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Table_initial
</UL>

<P><STRONG><a name="[b1]"></a>BSP_init</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, bsp.o(i.BSP_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_randomSeed
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_BP_BuzzerIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>BSP_ledRedOff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp.o(i.BSP_ledRedOff))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_initial
</UL>

<P><STRONG><a name="[b5]"></a>BSP_random</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bsp.o(i.BSP_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BSP_random &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; QF_tickXFromISR_ &rArr; QActive_postFromISR_ &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_thinking
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_eating
</UL>

<P><STRONG><a name="[b4]"></a>BSP_randomSeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp.o(i.BSP_randomSeed))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_init
</UL>

<P><STRONG><a name="[c]"></a>GPIOPortA_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bsp.o(i.GPIOPortA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GPIOPortA_IRQHandler &rArr; QActive_postFromISR_ &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newXFromISR_
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postFromISR_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>Heartbeat_ctor</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, blinky.o(i.Heartbeat_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Heartbeat_ctor &rArr; QTimeEvt_ctorX
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_ctorX
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>Philo_ctor</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, philo.o(i.Philo_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Philo_ctor &rArr; QTimeEvt_ctorX
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_ctorX
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>QActive_ctor</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, qf_qact.o(i.QActive_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QActive_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_ctor
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_bzero
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Table_ctor
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_ctor
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_ctor
</UL>

<P><STRONG><a name="[c9]"></a>QActive_get_</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, qf_actq.o(i.QActive_get_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = QActive_get_ &rArr; ulTaskNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_function
</UL>

<P><STRONG><a name="[b9]"></a>QActive_postFromISR_</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, qf_port.o(i.QActive_postFromISR_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = QActive_postFromISR_ &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gcFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_tickXFromISR_
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_publishFromISR_
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortA_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>QActive_postLIFO_</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, qf_actq.o(i.QActive_postLIFO_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = QActive_postLIFO_ &rArr; xTaskGenericNotify &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qf_qact.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>QActive_post_</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, qf_actq.o(i.QActive_post_))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = QActive_post_ &rArr; xTaskGenericNotify &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qf_qact.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>QActive_setAttr</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, qf_port.o(i.QActive_setAttr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QActive_setAttr
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>QActive_start_</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, qf_port.o(i.QActive_start_))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = QActive_start_ &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_add_
</UL>
<BR>[Address Reference Count : 2]<UL><LI> qf_actq.o(.constdata)
<LI> qf_qact.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>QActive_subscribe</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, qf_ps.o(i.QActive_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QActive_subscribe &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_initial
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Table_initial
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_initial
</UL>

<P><STRONG><a name="[d2]"></a>QEQueue_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, qf_qeq.o(i.QEQueue_init))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
</UL>

<P><STRONG><a name="[df]"></a>QF_LOG2</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, qf_act.o(i.QF_LOG2))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_publish_
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_publishFromISR_
</UL>

<P><STRONG><a name="[d3]"></a>QF_add_</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, qf_act.o(i.QF_add_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QF_add_ &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
</UL>

<P><STRONG><a name="[c7]"></a>QF_bzero</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, qf_act.o(i.QF_bzero))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_ctor
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_psInit
</UL>

<P><STRONG><a name="[d0]"></a>QF_gc</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, qf_dyn.o(i.QF_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QF_gc &rArr; QMPool_put &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_put
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_publish_
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_function
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post_
</UL>

<P><STRONG><a name="[ce]"></a>QF_gcFromISR</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, qf_port.o(i.QF_gcFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QF_gcFromISR &rArr; QMPool_putFromISR
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_putFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_publishFromISR_
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postFromISR_
</UL>

<P><STRONG><a name="[ea]"></a>QF_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, qf_port.o(i.QF_init))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>QF_newXFromISR_</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, qf_port.o(i.QF_newXFromISR_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = QF_newXFromISR_ &rArr; QMPool_getFromISR
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_getFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortA_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>QF_newX_</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, qf_dyn.o(i.QF_newX_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = QF_newX_ &rArr; QMPool_get &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_get
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Table_serving
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_hungry
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_eating
</UL>

<P><STRONG><a name="[d9]"></a>QF_onStartup</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, bsp.o(i.QF_onStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QF_onStartup &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
</UL>

<P><STRONG><a name="[db]"></a>QF_poolInit</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, qf_dyn.o(i.QF_poolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = QF_poolInit &rArr; QMPool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>QF_psInit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, qf_ps.o(i.QF_psInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QF_psInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_bzero
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>QF_publishFromISR_</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, qf_port.o(i.QF_publishFromISR_))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = QF_publishFromISR_ &rArr; QActive_postFromISR_ &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postFromISR_
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gcFromISR
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_LOG2
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
</UL>

<P><STRONG><a name="[c6]"></a>QF_publish_</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, qf_ps.o(i.QF_publish_))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = QF_publish_ &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; QF_tickXFromISR_ &rArr; QActive_postFromISR_ &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_LOG2
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Table_serving
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_eating
</UL>

<P><STRONG><a name="[e0]"></a>QF_run</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, qf_port.o(i.QF_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = QF_run &rArr; vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onStartup
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>QF_tickXFromISR_</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, qf_port.o(i.QF_tickXFromISR_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = QF_tickXFromISR_ &rArr; QActive_postFromISR_ &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postFromISR_
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
</UL>

<P><STRONG><a name="[e3]"></a>QF_tickX_</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, qf_time.o(i.QF_tickX_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QF_tickX_ &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTicker_dispatch_
</UL>

<P><STRONG><a name="[c8]"></a>QHsm_ctor</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, qep_hsm.o(i.QHsm_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_ctor
</UL>

<P><STRONG><a name="[8c]"></a>QHsm_dispatch_</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, qep_hsm.o(i.QHsm_dispatch_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = QHsm_dispatch_ &rArr; QHsm_tran_
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_tran_
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Address Reference Count : 2]<UL><LI> qep_hsm.o(.constdata)
<LI> qf_qact.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>QHsm_init_</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, qep_hsm.o(i.QHsm_init_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = QHsm_init_
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Address Reference Count : 2]<UL><LI> qep_hsm.o(.constdata)
<LI> qf_qact.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>QHsm_top</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qep_hsm.o(i.QHsm_top))
<BR>[Address Reference Count : 8]<UL><LI> blinky.o(i.Heartbeat_start)
<LI> blinky.o(i.Heartbeat_stop)
<LI> philo.o(i.Philo_thinking)
<LI> qep_hsm.o(i.QHsm_ctor)
<LI> qep_hsm.o(i.QHsm_init_)
<LI> philo.o(i.Philo_eating)
<LI> philo.o(i.Philo_hungry)
<LI> table.o(i.Table_active)
</UL>
<P><STRONG><a name="[d8]"></a>QMPool_get</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, qf_mem.o(i.QMPool_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QMPool_get &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
</UL>

<P><STRONG><a name="[d7]"></a>QMPool_getFromISR</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, qf_port.o(i.QMPool_getFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QMPool_getFromISR
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newXFromISR_
</UL>

<P><STRONG><a name="[dc]"></a>QMPool_init</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, qf_mem.o(i.QMPool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QMPool_init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_poolInit
</UL>

<P><STRONG><a name="[d5]"></a>QMPool_put</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, qf_mem.o(i.QMPool_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QMPool_put &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
</UL>

<P><STRONG><a name="[d6]"></a>QMPool_putFromISR</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, qf_port.o(i.QMPool_putFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QMPool_putFromISR
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gcFromISR
</UL>

<P><STRONG><a name="[c2]"></a>QTimeEvt_armX</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, qf_time.o(i.QTimeEvt_armX))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QTimeEvt_armX &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_start
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_thinking
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_eating
</UL>

<P><STRONG><a name="[bc]"></a>QTimeEvt_ctorX</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, qf_time.o(i.QTimeEvt_ctorX))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QTimeEvt_ctorX
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_ctor
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_ctor
</UL>

<P><STRONG><a name="[c3]"></a>QTimeEvt_disarm</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, qf_time.o(i.QTimeEvt_disarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QTimeEvt_disarm &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_start
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_thinking
</UL>

<P><STRONG><a name="[aa]"></a>Q_onAssert</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, bsp.o(i.Q_onAssert))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_init_
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_dispatch_
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_tran_
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Table_serving
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Table_paused
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Table_active
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_ctorX
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_publish_
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_subscribe
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_thinking
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_hungry
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_eating
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_poolInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_setAttr
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_tickXFromISR_
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_publishFromISR_
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newXFromISR_
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postFromISR_
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_putFromISR
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_getFromISR
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gcFromISR
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_put
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_get
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_tickX_
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post_
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postLIFO_
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_get_
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTicker_postLIFO_
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_add_
</UL>

<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; QF_tickXFromISR_ &rArr; QActive_postFromISR_ &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, system_tm4c123gh6pm.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getOscClk
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_init
</UL>

<P><STRONG><a name="[78]"></a>SystemInit</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, system_tm4c123gh6pm.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tm4c123gh6pm.o(.text)
</UL>
<P><STRONG><a name="[e7]"></a>Table_ctor</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, table.o(i.Table_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Table_ctor &rArr; QActive_ctor
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>main</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = main &rArr; QF_run &rArr; vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Table_ctor
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_psInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_poolInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_setAttr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_ctor
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heartbeat_ctor
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[f6]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[cc]"></a>ulTaskNotifyTake</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tasks.o(i.ulTaskNotifyTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ulTaskNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_get_
</UL>

<P><STRONG><a name="[ec]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[fc]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[f3]"></a>vApplicationIdleHook</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bsp.o(i.vApplicationIdleHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vApplicationIdleHook
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[f8]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp.o(i.vApplicationStackOverflowHook))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[f9]"></a>vApplicationTickHook</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, bsp.o(i.vApplicationTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vApplicationTickHook &rArr; QF_tickXFromISR_ &rArr; QActive_postFromISR_ &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_tickXFromISR_
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_publishFromISR_
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newXFromISR_
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postFromISR_
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[f7]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[f5]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[ed]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[f0]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[ca]"></a>vPortEnterCritical</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_publish_
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_subscribe
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_put
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_get
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_tickX_
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post_
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postLIFO_
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_get_
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTicker_post_
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTicker_dispatch_
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_add_
</UL>

<P><STRONG><a name="[cb]"></a>vPortExitCritical</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_publish_
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_subscribe
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_put
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_get
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_tickX_
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post_
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postLIFO_
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_get_
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTicker_post_
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTicker_dispatch_
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_add_
</UL>

<P><STRONG><a name="[fe]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[fa]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
</UL>

<P><STRONG><a name="[cd]"></a>vTaskNotifyGiveFromISR</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, tasks.o(i.vTaskNotifyGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postFromISR_
</UL>

<P><STRONG><a name="[e1]"></a>vTaskStartScheduler</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
</UL>

<P><STRONG><a name="[b6]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_publish_
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_random
</UL>

<P><STRONG><a name="[a9]"></a>vTaskSwitchContext</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[fd]"></a>xPortStartScheduler</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[d4]"></a>xTaskCreateStatic</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
</UL>

<P><STRONG><a name="[cf]"></a>xTaskGenericNotify</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, tasks.o(i.xTaskGenericNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskGenericNotify &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post_
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postLIFO_
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTicker_post_
</UL>

<P><STRONG><a name="[e5]"></a>xTaskIncrementTick</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xTaskIncrementTick &rArr; vApplicationTickHook &rArr; QF_tickXFromISR_ &rArr; QActive_postFromISR_ &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b7]"></a>xTaskResumeAll</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; QF_tickXFromISR_ &rArr; QActive_postFromISR_ &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_publish_
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_random
</UL>

<P><STRONG><a name="[9d]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[131]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[132]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[da]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onStartup
</UL>

<P><STRONG><a name="[82]"></a>Philo_eating</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, philo.o(i.Philo_eating))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Philo_eating &rArr; QF_publish_ &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; QF_tickXFromISR_ &rArr; QActive_postFromISR_ &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_publish_
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_random
</UL>
<BR>[Address Reference Count : 1]<UL><LI> philo.o(i.Philo_hungry)
</UL>
<P><STRONG><a name="[83]"></a>Philo_hungry</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, philo.o(i.Philo_hungry))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Philo_hungry &rArr; QF_newX_ &rArr; QMPool_get &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> philo.o(i.Philo_thinking)
</UL>
<P><STRONG><a name="[80]"></a>Philo_initial</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, philo.o(i.Philo_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Philo_initial &rArr; QActive_subscribe &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_subscribe
</UL>
<BR>[Address Reference Count : 1]<UL><LI> philo.o(i.Philo_ctor)
</UL>
<P><STRONG><a name="[81]"></a>Philo_thinking</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, philo.o(i.Philo_thinking))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Philo_thinking &rArr; BSP_random &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; QF_tickXFromISR_ &rArr; QActive_postFromISR_ &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_random
</UL>
<BR>[Address Reference Count : 2]<UL><LI> philo.o(i.Philo_eating)
<LI> philo.o(i.Philo_initial)
</UL>
<P><STRONG><a name="[87]"></a>Table_active</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, table.o(i.Table_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Table_active
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Address Reference Count : 2]<UL><LI> table.o(i.Table_paused)
<LI> table.o(i.Table_serving)
</UL>
<P><STRONG><a name="[85]"></a>Table_initial</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, table.o(i.Table_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Table_initial &rArr; QActive_subscribe &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_subscribe
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_displayPhilStat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> table.o(i.Table_ctor)
</UL>
<P><STRONG><a name="[88]"></a>Table_paused</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, table.o(i.Table_paused))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Table_paused
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_displayPhilStat
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_displayPaused
</UL>
<BR>[Address Reference Count : 1]<UL><LI> table.o(i.Table_serving)
</UL>
<P><STRONG><a name="[86]"></a>Table_serving</STRONG> (Thumb, 568 bytes, Stack size 32 bytes, table.o(i.Table_serving))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Table_serving &rArr; QF_publish_ &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; vApplicationTickHook &rArr; QF_tickXFromISR_ &rArr; QActive_postFromISR_ &rArr; vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_publish_
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_displayPhilStat
</UL>
<BR>[Address Reference Count : 2]<UL><LI> table.o(i.Table_initial)
<LI> table.o(i.Table_paused)
</UL>
<P><STRONG><a name="[7a]"></a>Heartbeat_initial</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, blinky.o(i.Heartbeat_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Heartbeat_initial &rArr; QActive_subscribe &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_subscribe
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ledRedOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blinky.o(i.Heartbeat_ctor)
</UL>
<P><STRONG><a name="[7b]"></a>Heartbeat_off</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, blinky.o(i.Heartbeat_off))
<BR>[Address Reference Count : 3]<UL><LI> blinky.o(i.Heartbeat_initial)
<LI> blinky.o(i.Heartbeat_on)
<LI> blinky.o(i.Heartbeat_start)
</UL>
<P><STRONG><a name="[7c]"></a>Heartbeat_on</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, blinky.o(i.Heartbeat_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Heartbeat_on
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_bstrPackLedBlueOn
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_bstrPackLedBlueOff
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_BP_Buzzer_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blinky.o(i.Heartbeat_off)
</UL>
<P><STRONG><a name="[7d]"></a>Heartbeat_start</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, blinky.o(i.Heartbeat_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Heartbeat_start &rArr; QTimeEvt_armX &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
</UL>
<BR>[Address Reference Count : 3]<UL><LI> blinky.o(i.Heartbeat_off)
<LI> blinky.o(i.Heartbeat_on)
<LI> blinky.o(i.Heartbeat_stop)
</UL>
<P><STRONG><a name="[7e]"></a>Heartbeat_stop</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, blinky.o(i.Heartbeat_stop))
<BR>[Address Reference Count : 1]<UL><LI> blinky.o(i.Heartbeat_start)
</UL>
<P><STRONG><a name="[e6]"></a>getOscClk</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, system_tm4c123gh6pm.o(i.getOscClk))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[e4]"></a>QHsm_tran_</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, qep_hsm.o(i.QHsm_tran_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QHsm_tran_
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_dispatch_
</UL>

<P><STRONG><a name="[8e]"></a>QTicker_dispatch_</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, qf_actq.o(i.QTicker_dispatch_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = QTicker_dispatch_ &rArr; QF_tickX_ &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_tickX_
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qf_actq.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>QTicker_init_</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qf_actq.o(i.QTicker_init_))
<BR>[Address Reference Count : 1]<UL><LI> qf_actq.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>QTicker_postLIFO_</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, qf_actq.o(i.QTicker_postLIFO_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QTicker_postLIFO_
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qf_actq.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>QTicker_post_</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, qf_actq.o(i.QTicker_post_))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = QTicker_post_ &rArr; xTaskGenericNotify &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qf_actq.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>task_function</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, qf_port.o(i.task_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = task_function &rArr; QActive_get_ &rArr; ulTaskNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_get_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qf_port.o(i.QActive_start_)
</UL>
<P><STRONG><a name="[eb]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
</UL>

<P><STRONG><a name="[ee]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[f1]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[f2]"></a>prvDeleteTCB</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[8a]"></a>prvIdleTask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[f4]"></a>prvInitialiseNewTask</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[ef]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[101]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[89]"></a>prvTaskExitError</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
